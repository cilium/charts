name: ConformanceGKE (ci-gke)

# Any change in triggers needs to be reflected in the concurrency group.
on:
  push:
    branches:
      - master

env:
  clusterName: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}
  zone: us-west2-a

jobs:
  installation-and-connectivity:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          persist-credentials: false

      - name: Set up job variables
        id: vars
        run: |
          # Get last commit message
          readonly local last_commit_log=$(git log -1 --pretty=format:"%s")
          echo "last commit log: $last_commit_log"

          readonly local chart_version=$(echo "$last_commit_log" | grep -Eo "Add[^@]+" | sed 's/Add\ //' )
          echo "Helm chart detected version: '${chart_version}'"

          if [[ -n "${chart_version}" ]]; then
            echo ::set-output name=chartVersion::${chart_version}
          fi
          echo ::set-output name=owner::${{ github.sha }}

      - name: Should it be e2e tested?
        run: |
          if [[ -z "${{ steps.vars.outputs.chartVersion }}" ]]; then
            echo "Not running helm e2e tests since the helm chart version was not detected in commit message"
            echo "Expected format: 'Add <chart-version>@<upstream-commit-sha>'"
            exit 78
          fi

      - name: Install Cilium CLI
        run: |
          curl -LO https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz
          sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/bin
          rm cilium-linux-amd64.tar.gz

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@04141d8a7edfc8c679682f23e7bbbe05cbe32bb3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_PR_SA_KEY }}
          export_default_credentials: true

      - name: Display gcloud CLI info
        run: |
          gcloud info

      - name: Create GKE cluster
        run: |
          if [[ ${{ steps.vars.outputs.chartVersion }} == 1.9.* || \
                  ${{ steps.vars.outputs.chartVersion }} == 1.8.* ]]; then
            gcloud container clusters create ${{ env.clusterName }} \
              --labels "usage=${{ github.repository_owner }}-${{ github.event.repository.name }},owner=${{ steps.vars.outputs.owner }}" \
              --zone ${{ env.zone }} \
              --image-type COS_CONTAINERD \
              --num-nodes 2 \
              --machine-type e2-custom-2-4096 \
              --disk-type pd-standard \
              --disk-size 10GB \
              --preemptible
          else
            gcloud container clusters create ${{ env.clusterName }} \
              --labels "usage=${{ github.repository_owner }}-${{ github.event.repository.name }},owner=${{ steps.vars.outputs.owner }}" \
              --zone ${{ env.zone }} \
              --image-type COS_CONTAINERD \
              --num-nodes 2 \
              --machine-type e2-custom-2-4096 \
              --disk-type pd-standard \
              --disk-size 10GB \
              --node-taints node.cilium.io/agent-not-ready=true:NoSchedule \
              --preemptible
          fi

      - name: Get cluster credentials
        run: |
          gcloud container clusters get-credentials ${{ env.clusterName }} --zone ${{ env.zone }}

      - name: Install Cilium
        run: |
          NATIVE_CIDR="$(gcloud container clusters describe ${{ env.clusterName }} --zone ${{ env.zone }} --format 'value(clusterIpv4Cidr)')"
          echo "NATIVE_CIDR $NATIVE_CIDR"
          helm repo add cilium https://helm.cilium.io
          helm repo update
          if [[ ${{ steps.vars.outputs.chartVersion }} == 1.11.* ]]; then
            helm install cilium cilium/cilium --version ${{ steps.vars.outputs.chartVersion }} \
              --namespace kube-system \
              --set nodeinit.enabled=true \
              --set nodeinit.reconfigureKubelet=true \
              --set nodeinit.removeCbrBridge=true \
              --set cni.binPath=/home/kubernetes/bin \
              --set gke.enabled=true \
              --set ipam.mode=kubernetes \
              --set nativeRoutingCIDR="${NATIVE_CIDR}"
          elif [[ ${{ steps.vars.outputs.chartVersion }} == 1.10.* ]]; then
            helm install cilium cilium/cilium --version ${{ steps.vars.outputs.chartVersion }} \
              --namespace kube-system \
              --set nodeinit.enabled=true \
              --set nodeinit.reconfigureKubelet=true \
              --set nodeinit.removeCbrBridge=true \
              --set cni.binPath=/home/kubernetes/bin \
              --set gke.enabled=true \
              --set ipam.mode=kubernetes \
              --set nativeRoutingCIDR="${NATIVE_CIDR}"
          elif [[ ${{ steps.vars.outputs.chartVersion }} == 1.9.* ]]; then
            helm install cilium cilium/cilium --version ${{ steps.vars.outputs.chartVersion }} \
              --namespace kube-system \
              --set nodeinit.enabled=true \
              --set nodeinit.reconfigureKubelet=true \
              --set nodeinit.restartPods=true \
              --set nodeinit.removeCbrBridge=true \
              --set cni.binPath=/home/kubernetes/bin \
              --set gke.enabled=true \
              --set ipam.mode=kubernetes \
              --set nativeRoutingCIDR="${NATIVE_CIDR}"
              kubectl wait -n kube-system pod -l k8s-app=cilium --for=condition=Ready --timeout=300s
          elif [[ ${{ steps.vars.outputs.chartVersion }} == 1.8.* ]]; then
            helm install cilium cilium/cilium --version ${{ steps.vars.outputs.chartVersion }} \
              --namespace kube-system \
              --set global.nodeinit.enabled=true \
              --set nodeinit.reconfigureKubelet=true \
              --set nodeinit.restartPods=true \
              --set nodeinit.removeCbrBridge=true \
              --set global.cni.binPath=/home/kubernetes/bin \
              --set global.gke.enabled=true \
              --set config.ipam=kubernetes \
              --set global.nativeRoutingCIDR="${NATIVE_CIDR}"
              kubectl wait -n kube-system pod -l k8s-app=cilium --for=condition=Ready --timeout=300s
          fi

      - name: Run connectivity test
        run: |
          if [[ ${{ steps.vars.outputs.chartVersion }} == 1.8.* ]]; then
            kubectl apply \
              -f "https://raw.githubusercontent.com/cilium/cilium/${{ steps.vars.outputs.chartVersion }}/examples/kubernetes/connectivity-check/connectivity-check.yaml"
            # wait for all pods in the default namespace since cilium-cli
            # does not support connectivity test in 1.8
            # can be removed once cilium-cli 0.8.5 is released
            kubectl wait pod -n default --for=condition=Ready --timeout=300s -l k8s!=all
          else
            cilium connectivity test
          fi

      - name: Post-test information gathering
        if: ${{ failure() }}
        run: |
          cilium status
          kubectl get pods --all-namespaces -o wide -v=6
          curl -sLO https://github.com/cilium/cilium-sysdump/releases/latest/download/cilium-sysdump.zip
          python cilium-sysdump.zip --output cilium-sysdump-out
        shell: bash {0} # Disable default fail-fast behaviour so that all commands run independently

      - name: Clean up GKE
        if: ${{ always() }}
        run: |
          gcloud container clusters delete ${{ env.clusterName }} --zone ${{ env.zone }} --quiet --async
        shell: bash {0} # Disable default fail-fast behaviour so that all commands run independently

      - name: Upload artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        with:
          name: cilium-sysdump-out.zip
          path: cilium-sysdump-out.zip
          retention-days: 5
